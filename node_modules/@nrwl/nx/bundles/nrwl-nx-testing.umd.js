(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('jasmine-marbles')) :
    typeof define === 'function' && define.amd ? define('@nrwl/nx/testing', ['exports', 'rxjs/operators', 'jasmine-marbles'], factory) :
    (factory((global.nrwl = global.nrwl || {}, global.nrwl.nx = global.nrwl.nx || {}, global.nrwl.nx.testing = {}),global.rxjs.operators,global['jasmine-marbles']));
}(this, (function (exports,operators,jasmineMarbles) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * \@whatItDoes reads all the values from an observable and returns a promise
     * with an array of all values. This should be used in combination with async/await.
     *
     * ## Example
     *
     * ```typescript
     * const obs = of(1, 2, 3, 4);
     * const res = await readAll(obs)
     * expect(res).toEqual([1, 2, 3, 4]);
     * ```
     * @template T
     * @param {?} o
     * @return {?}
     */
    function readAll(o) {
        return o.pipe(operators.toArray()).toPromise();
    }
    /**
     * \@whatItDoes reads the first value from an observable and returns a promise
     * with it. This should be used in combination with async/await.
     *
     * ## Example
     *
     * ```typescript
     * const obs = of(1, 2, 3, 4);
     * const res = await readFirst(obs)
     * expect(res).toEqual(1);
     * ```
     * @template T
     * @param {?} o
     * @return {?}
     */
    function readFirst(o) {
        return o.pipe(operators.first()).toPromise();
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.cold = jasmineMarbles.cold;
    exports.hot = jasmineMarbles.hot;
    exports.getTestScheduler = jasmineMarbles.getTestScheduler;
    exports.time = jasmineMarbles.time;
    exports.readAll = readAll;
    exports.readFirst = readFirst;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnJ3bC1ueC10ZXN0aW5nLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5yd2wvbngvdGVzdGluZy9zcmMvdGVzdGluZy11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaXJzdCwgdG9BcnJheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBAd2hhdEl0RG9lcyByZWFkcyBhbGwgdGhlIHZhbHVlcyBmcm9tIGFuIG9ic2VydmFibGUgYW5kIHJldHVybnMgYSBwcm9taXNlXG4gKiB3aXRoIGFuIGFycmF5IG9mIGFsbCB2YWx1ZXMuIFRoaXMgc2hvdWxkIGJlIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBhc3luYy9hd2FpdC5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3Qgb2JzID0gb2YoMSwgMiwgMywgNCk7XG4gKiBjb25zdCByZXMgPSBhd2FpdCByZWFkQWxsKG9icylcbiAqIGV4cGVjdChyZXMpLnRvRXF1YWwoWzEsIDIsIDMsIDRdKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZEFsbDxUPihvOiBPYnNlcnZhYmxlPFQ+KTogUHJvbWlzZTxUW10+IHtcbiAgcmV0dXJuIG8ucGlwZSh0b0FycmF5KCkpLnRvUHJvbWlzZSgpO1xufVxuXG4vKipcbiAqIEB3aGF0SXREb2VzIHJlYWRzIHRoZSBmaXJzdCB2YWx1ZSBmcm9tIGFuIG9ic2VydmFibGUgYW5kIHJldHVybnMgYSBwcm9taXNlXG4gKiB3aXRoIGl0LiBUaGlzIHNob3VsZCBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggYXN5bmMvYXdhaXQuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IG9icyA9IG9mKDEsIDIsIDMsIDQpO1xuICogY29uc3QgcmVzID0gYXdhaXQgcmVhZEZpcnN0KG9icylcbiAqIGV4cGVjdChyZXMpLnRvRXF1YWwoMSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaXJzdDxUPihvOiBPYnNlcnZhYmxlPFQ+KTogUHJvbWlzZTxUPiB7XG4gIHJldHVybiBvLnBpcGUoZmlyc3QoKSkudG9Qcm9taXNlKCk7XG59XG4iXSwibmFtZXMiOlsidG9BcnJheSIsImZpcnN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQWNBLGFBQWdCLE9BQU8sQ0FBSSxDQUFnQjtRQUN6QyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNBLGlCQUFPLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFjRCxhQUFnQixTQUFTLENBQUksQ0FBZ0I7UUFDM0MsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDQyxlQUFLLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==