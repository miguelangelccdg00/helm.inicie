import { first, toArray } from 'rxjs/operators';
export { cold, hot, getTestScheduler, time } from 'jasmine-marbles';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * \@whatItDoes reads all the values from an observable and returns a promise
 * with an array of all values. This should be used in combination with async/await.
 *
 * ## Example
 *
 * ```typescript
 * const obs = of(1, 2, 3, 4);
 * const res = await readAll(obs)
 * expect(res).toEqual([1, 2, 3, 4]);
 * ```
 * @template T
 * @param {?} o
 * @return {?}
 */
function readAll(o) {
    return o.pipe(toArray()).toPromise();
}
/**
 * \@whatItDoes reads the first value from an observable and returns a promise
 * with it. This should be used in combination with async/await.
 *
 * ## Example
 *
 * ```typescript
 * const obs = of(1, 2, 3, 4);
 * const res = await readFirst(obs)
 * expect(res).toEqual(1);
 * ```
 * @template T
 * @param {?} o
 * @return {?}
 */
function readFirst(o) {
    return o.pipe(first()).toPromise();
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { readAll, readFirst };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnJ3bC1ueC10ZXN0aW5nLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9AbnJ3bC9ueC90ZXN0aW5nL3NyYy90ZXN0aW5nLXV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpcnN0LCB0b0FycmF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEB3aGF0SXREb2VzIHJlYWRzIGFsbCB0aGUgdmFsdWVzIGZyb20gYW4gb2JzZXJ2YWJsZSBhbmQgcmV0dXJucyBhIHByb21pc2VcbiAqIHdpdGggYW4gYXJyYXkgb2YgYWxsIHZhbHVlcy4gVGhpcyBzaG91bGQgYmUgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGFzeW5jL2F3YWl0LlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBvYnMgPSBvZigxLCAyLCAzLCA0KTtcbiAqIGNvbnN0IHJlcyA9IGF3YWl0IHJlYWRBbGwob2JzKVxuICogZXhwZWN0KHJlcykudG9FcXVhbChbMSwgMiwgMywgNF0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkQWxsPFQ+KG86IE9ic2VydmFibGU8VD4pOiBQcm9taXNlPFRbXT4ge1xuICByZXR1cm4gby5waXBlKHRvQXJyYXkoKSkudG9Qcm9taXNlKCk7XG59XG5cbi8qKlxuICogQHdoYXRJdERvZXMgcmVhZHMgdGhlIGZpcnN0IHZhbHVlIGZyb20gYW4gb2JzZXJ2YWJsZSBhbmQgcmV0dXJucyBhIHByb21pc2VcbiAqIHdpdGggaXQuIFRoaXMgc2hvdWxkIGJlIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBhc3luYy9hd2FpdC5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3Qgb2JzID0gb2YoMSwgMiwgMywgNCk7XG4gKiBjb25zdCByZXMgPSBhd2FpdCByZWFkRmlyc3Qob2JzKVxuICogZXhwZWN0KHJlcykudG9FcXVhbCgxKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpcnN0PFQ+KG86IE9ic2VydmFibGU8VD4pOiBQcm9taXNlPFQ+IHtcbiAgcmV0dXJuIG8ucGlwZShmaXJzdCgpKS50b1Byb21pc2UoKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQWNBLFNBQWdCLE9BQU8sQ0FBSSxDQUFnQjtJQUN6QyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztDQUN0Qzs7Ozs7Ozs7Ozs7Ozs7OztBQWNELFNBQWdCLFNBQVMsQ0FBSSxDQUFnQjtJQUMzQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztDQUNwQzs7Ozs7Ozs7Ozs7Ozs7In0=